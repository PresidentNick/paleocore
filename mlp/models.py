from django.contrib.gis.db import models
from mysite.ontologies import BASIS_OF_RECORD_VOCABULARY, ITEM_TYPE_VOCABULARY, COLLECTING_METHOD_VOCABULARY, COLLECTOR_CHOICES


# Model for occurrence table generated by inspect.db
class Occurrence(models.Model):
    id = models.IntegerField(primary_key=True)  # NOT NULL
    barcode = models.IntegerField(blank=True, null=True)
    date_last_modified = models.DateTimeField("Date Last Modified", auto_now_add=True)
    basis_of_record = models.CharField("Basis of Record", max_length=50, blank=True, null=False, choices=BASIS_OF_RECORD_VOCABULARY)  # NOT NULL
    item_type = models.CharField("Item Type", max_length=255, blank=True, null=False, choices=ITEM_TYPE_VOCABULARY)  # NOT NULL
    collection_code = models.CharField("Collection Code", max_length=20, blank=True, null=True, default='MLP')
    # Note we're not using localities!
    item_number = models.CharField("Item Number", max_length=50, null=True, blank=True)
    item_part = models.CharField("Item Part", max_length=10, null=True, blank=True)
    catalog_number = models.CharField("Catalog Number", max_length=255, blank=True, null=True)
    # TODO add richtext field for remarks
    remarks = models.TextField(max_length=255, null=True, blank=True)
    item_scientific_name = models.CharField("Item Scientific Name", max_length=255, null=True, blank=True)
    item_description = models.CharField("Item Description", max_length=255, blank=True, null=True)
    georeference_remarks = models.CharField(max_length=50, null=True, blank=True)
    collecting_method = models.CharField("Collecting Method", max_length=50, blank=True, choices=COLLECTING_METHOD_VOCABULARY, null=False)  # NOT NULL
    related_catalog_items = models.CharField("Related Catalog Items", max_length=50, null=True, blank=True)
    collector = models.CharField(max_length=50, blank=True, null=True, choices=COLLECTOR_CHOICES)
    finder = models.CharField(max_length=50, blank=True, null=True)
    disposition = models.CharField(max_length=255, blank=True, null=True)
    field_number = models.DateTimeField(blank=True, null=False)  # NOT NULL
    year_collected = models.IntegerField(blank=True, null=True)
    individual_count = models.IntegerField(blank=True, null=True, default=1)
    preparation_status = models.CharField(max_length=50, blank=True, null=True)
    stratigraphic_marker_upper = models.CharField(max_length=255, blank=True, null=True)
    distance_from_upper = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_marker_lower = models.CharField(max_length=255, blank=True, null=True)
    distance_from_lower = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_marker_found = models.CharField(max_length=255, blank=True, null=True)
    distance_from_found = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_marker_likely = models.CharField(max_length=255, blank=True, null=True)
    distance_from_likely = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_member = models.CharField(max_length=255, blank=True, null=True)
    analytical_unit = models.CharField(max_length=255, blank=True, null=True)
    analyticalunit2 = models.CharField(max_length=255, blank=True, null=True)
    analyticalunit3 = models.CharField(max_length=255, blank=True, null=True)
    in_situ = models.BooleanField(default=False)
    ranked = models.BooleanField(default=False)
    image = models.FileField(max_length=255, blank=True, upload_to="uploads/images/mlp", null=True)
    weathering = models.SmallIntegerField(blank=True, null=True)
    surface_modification = models.CharField(max_length=255, blank=True, null=True)
    #TODO Change presentation to show only 2 decimal places
    point_x = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    point_y = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    problem = models.BooleanField(default=False)
    problem_comment = models.TextField(max_length=255, blank=True, null=True)
    geom = models.GeometryField(srid=32637, blank=True, null=True)  # NOT NULL
    objects = models.GeoManager()

    class Meta:
        managed = True
        db_table = 'mlp_occurrence'



