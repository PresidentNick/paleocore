from django.contrib.gis.db import models
from mysite.ontologies import BASIS_OF_RECORD_VOCABULARY, ITEM_TYPE_VOCABULARY, COLLECTING_METHOD_VOCABULARY, COLLECTOR_CHOICES
from drp.models import drp_taxonomy
from mysite.ontologies import SIDE_VOCABULARY


# Model for occurrence table generated by inspect.db
class Occurrence(models.Model):
    id = models.IntegerField(primary_key=True)  # NOT NULL
    barcode = models.IntegerField(blank=True, null=True)
    date_last_modified = models.DateTimeField("Date Last Modified", auto_now_add=True, auto_now=True)
    basis_of_record = models.CharField("Basis of Record", max_length=50, blank=True, null=False, choices=BASIS_OF_RECORD_VOCABULARY)  # NOT NULL
    item_type = models.CharField("Item Type", max_length=255, blank=True, null=False, choices=ITEM_TYPE_VOCABULARY)  # NOT NULL
    collection_code = models.CharField("Collection Code", max_length=20, blank=True, null=True, default='MLP')
    # Note we're not using localities!
    item_number = models.CharField("Item Number", max_length=50, null=True, blank=True)
    item_part = models.CharField("Item Part", max_length=10, null=True, blank=True)
    catalog_number = models.CharField("Catalog Number", max_length=255, blank=True, null=True)
    # TODO add richtext field for remarks
    remarks = models.TextField(max_length=255, null=True, blank=True)
    item_scientific_name = models.CharField("Item Scientific Name", max_length=255, null=True, blank=True)
    item_description = models.CharField("Item Description", max_length=255, blank=True, null=True)
    georeference_remarks = models.CharField(max_length=50, null=True, blank=True)
    collecting_method = models.CharField("Collecting Method", max_length=50, blank=True, choices=COLLECTING_METHOD_VOCABULARY, null=False)  # NOT NULL
    related_catalog_items = models.CharField("Related Catalog Items", max_length=50, null=True, blank=True)
    collector = models.CharField(max_length=50, blank=True, null=True, choices=COLLECTOR_CHOICES)
    finder = models.CharField(max_length=50, blank=True, null=True)
    disposition = models.CharField(max_length=255, blank=True, null=True)
    field_number = models.DateTimeField(blank=True, null=False)  # NOT NULL
    year_collected = models.IntegerField(blank=True, null=True)
    individual_count = models.IntegerField(blank=True, null=True, default=1)
    preparation_status = models.CharField(max_length=50, blank=True, null=True)
    stratigraphic_marker_upper = models.CharField(max_length=255, blank=True, null=True)
    distance_from_upper = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_marker_lower = models.CharField(max_length=255, blank=True, null=True)
    distance_from_lower = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_marker_found = models.CharField(max_length=255, blank=True, null=True)
    distance_from_found = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_marker_likely = models.CharField(max_length=255, blank=True, null=True)
    distance_from_likely = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_member = models.CharField(max_length=255, blank=True, null=True)
    analytical_unit = models.CharField(max_length=255, blank=True, null=True)
    analyticalunit2 = models.CharField(max_length=255, blank=True, null=True)
    analyticalunit3 = models.CharField(max_length=255, blank=True, null=True)
    in_situ = models.BooleanField(default=False)
    ranked = models.BooleanField(default=False)
    image = models.FileField(max_length=255, blank=True, upload_to="uploads/images/mlp", null=True)
    weathering = models.SmallIntegerField(blank=True, null=True)
    surface_modification = models.CharField(max_length=255, blank=True, null=True)
    #TODO Change presentation to show only 2 decimal places
    #point_x = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)  # now taken from geom
    #point_y = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)  # now taken from geom
    problem = models.BooleanField(default=False)
    problem_comment = models.TextField(max_length=255, blank=True, null=True)
    geom = models.GeometryField(srid=32637, blank=True, null=True)  # NOT NULL
    objects = models.GeoManager()

    class Meta:
        managed = True
        db_table = 'mlp_occurrence'
        verbose_name = 'MLP Occurrence'
        verbose_name_plural = 'MLP Occurrences'

    def __unicode__(self):
        return self.catalog_number.replace("None", "").replace("--", "")

    def point_X(self):
        return self.geom.x

    def point_Y(self):
        return self.geom.y

    @staticmethod
    def fields_to_display():
        fields = ("id", "barcode")
        return fields


class Biology(models.Model):
    occurrence = models.OneToOneField("Occurrence")
    kingdom = models.CharField(null=True, blank=True, max_length=50)
    phylum = models.CharField(null=True, blank=True, max_length=50)
    tax_class = models.CharField("Class",null=True, blank=True, max_length=50,db_column="class")
    tax_order = models.CharField("Order",null=True, blank=True, max_length=50,db_column="order_")
    family = models.CharField(null=True, blank=True, max_length=50)
    subfamily = models.CharField(null=True, blank=True, max_length=50)
    tribe = models.CharField(null=True, blank=True, max_length=50)
    genus = models.CharField(null=True, blank=True, max_length=50)
    specificepithet = models.CharField("Species Name",null=True, blank=True, max_length=50)
    infraspecificepithet = models.CharField(null=True, blank=True, max_length=50)
    infraspecificrank = models.CharField(null=True, blank=True, max_length=50)
    authoryearofscientificname = models.CharField(null=True, blank=True, max_length=50)
    nomenclaturalcode = models.CharField(null=True, blank=True, max_length=50)
    identificationqualifier = models.CharField(null=True, blank=True, max_length=50)
    identifiedby = models.CharField(null=True, blank=True, max_length=100)
    dateidentified = models.DateTimeField(null=True, blank=True)
    typestatus = models.CharField(null=True, blank=True, max_length=50)
    sex = models.CharField(null=True, blank=True, max_length=50)
    lifestage = models.CharField(null=True, blank=True, max_length=50)
    preparations = models.CharField(null=True, blank=True, max_length=50)
    morphobanknum = models.IntegerField(null=True, blank=True)
    side = models.CharField(null=True, blank=True, max_length=50, choices=SIDE_VOCABULARY)
    attributes = models.CharField(null=True, blank=True, max_length=50)
    faunanotes = models.TextField(null=True, blank=True, max_length=64000)
    toothupperorlower = models.CharField(null=True, blank=True, max_length=50)
    toothnumber = models.CharField(null=True, blank=True, max_length=50)
    toothtype = models.CharField(null=True, blank=True, max_length=50)
    umtoothrowlengthmm = models.FloatField(null=True, blank=True)
    um1lengthmm = models.FloatField(null=True, blank=True)
    um1widthmm = models.FloatField(null=True, blank=True)
    um2lengthmm = models.FloatField(null=True, blank=True)
    um2widthmm = models.FloatField(null=True, blank=True)
    um3lengthmm = models.FloatField(null=True, blank=True)
    um3widthmm = models.FloatField(null=True, blank=True)
    lmtoothrowlengthmm = models.FloatField(null=True, blank=True)
    lm1length = models.FloatField(null=True, blank=True)
    lm1width = models.FloatField(null=True, blank=True)
    lm2length = models.FloatField(null=True, blank=True)
    lm2width = models.FloatField(null=True, blank=True)
    lm3length = models.FloatField(null=True, blank=True)
    lm3width = models.FloatField(null=True, blank=True)
    element = models.CharField(null=True, blank=True, max_length=50)
    elementmodifier = models.CharField(null=True, blank=True, max_length=50)
    uli1 = models.BooleanField(default=False)
    uli2 = models.BooleanField(default=False)
    uli3 = models.BooleanField(default=False)
    uli4 = models.BooleanField(default=False)
    uli5 = models.BooleanField(default=False)
    uri1 = models.BooleanField(default=False)
    uri2 = models.BooleanField(default=False)
    uri3 = models.BooleanField(default=False)
    uri4 = models.BooleanField(default=False)
    uri5 = models.BooleanField(default=False)
    ulc = models.BooleanField(default=False)
    urc = models.BooleanField(default=False)
    ulp1 = models.BooleanField(default=False)
    ulp2 = models.BooleanField(default=False)
    ulp3 = models.BooleanField(default=False)
    ulp4 = models.BooleanField(default=False)
    urp1 = models.BooleanField(default=False)
    urp2 = models.BooleanField(default=False)
    urp3 = models.BooleanField(default=False)
    urp4 = models.BooleanField(default=False)
    ulm1 = models.BooleanField(default=False)
    ulm2 = models.BooleanField(default=False)
    ulm3 = models.BooleanField(default=False)
    urm1 = models.BooleanField(default=False)
    urm2 = models.BooleanField(default=False)
    urm3 = models.BooleanField(default=False)
    lli1 = models.BooleanField(default=False)
    lli2 = models.BooleanField(default=False)
    lli3 = models.BooleanField(default=False)
    lli4 = models.BooleanField(default=False)
    lli5 = models.BooleanField(default=False)
    lri1 = models.BooleanField(default=False)
    lri2 = models.BooleanField(default=False)
    lri3 = models.BooleanField(default=False)
    lri4 = models.BooleanField(default=False)
    lri5 = models.BooleanField(default=False)
    llc = models.BooleanField(default=False)
    lrc = models.BooleanField(default=False)
    llp1 = models.BooleanField(default=False)
    llp2 = models.BooleanField(default=False)
    llp3 = models.BooleanField(default=False)
    llp4 = models.BooleanField(default=False)
    lrp1 = models.BooleanField(default=False)
    lrp2 = models.BooleanField(default=False)
    lrp3 = models.BooleanField(default=False)
    lrp4 = models.BooleanField(default=False)
    llm1 = models.BooleanField(default=False)
    llm2 = models.BooleanField(default=False)
    llm3 = models.BooleanField(default=False)
    lrm1 = models.BooleanField(default=False)
    lrm2 = models.BooleanField(default=False)
    lrm3 = models.BooleanField(default=False)

    def lowest_level_identification(self):
        if(self.genus):
            return str(self.genus) + " " + str(self.specificepithet).replace("None","")
        elif self.tribe:
            return str(self.tribe).replace("None","")
        elif self.subfamily:
            return str(self.subfamily).replace("None","")
        elif self.family:
            return str(self.family).replace("None","")
        elif self.tax_order:
            return str(self.tax_order).replace("None","")
        else:
            return str(self.tax_class).replace("None","")

    class Meta:
        verbose_name = "MLP Biology"
        verbose_name_plural = "MLP Biology"

    def __unicode__(self):
        if(self.genus):
            return str(self.genus) + " " + str(self.specificepithet).replace("None","")
        elif self.tribe:
            return str(self.tribe).replace("None","")
        elif self.subfamily:
            return str(self.subfamily).replace("None","")
        elif self.family:
            return str(self.family).replace("None","")
        elif self.tax_order:
            return str(self.tax_order).replace("None","")
        else:
            return str(self.tax_class).replace("None","")

    def save(self):
        # if not self.id:#if this is a fresh save with no id yet
        #     last_bio_ID = mlp_biology.objects.order_by('id').reverse()[0].id
        #     self.id = last_bio_ID + 1
    
        #Autopopulate up the taxonomy hierarchy
        #As written, this MASSIVELY violates the Don't Repeat Yourself Princible
        #To fix this, would assign the fields ordinal ranks, then to write single
        #update expression to update UP the hierarchy.
        if self.genus:#if there is a genus, then look to taxonomy and populate up if possible.
            QS = drp_taxonomy.objects.filter(genus__exact=self.genus).filter(rank__exact="Genus")
            if QS.exists():
                if QS.count()==1:
                    #update higher level self fields
                    self.tribe = QS[0].tribe
                    self.subfamily = QS[0].subfamily
                    self.family = QS[0].family
                    self.tax_order = QS[0].tax_order
                    self.tax_class = QS[0].tax_class
                    self.phylum = QS[0].phylum
                    self.kingdom = QS[0].phylum
                    super(Biology, self).save()
                    return
                if QS.count() > 1:
                    #maybe send a warning?
                    super(Biology, self).save()
                    return
        if self.tribe :#if there is a tribe, then look to taxonomy and populate up if possible.
            QS = drp_taxonomy.objects.filter(tribe__exact=self.tribe).filter(rank__exact="Tribe")
            if QS.exists():
                if QS.count()==1:
                    #update higher level self fields
                    self.subfamily = QS[0].subfamily
                    self.family = QS[0].family
                    self.tax_order = QS[0].tax_order
                    self.tax_class = QS[0].tax_class
                    self.phylum = QS[0].phylum
                    self.kingdom = QS[0].phylum
                    super(Biology, self).save()
                    return
                if QS.count() > 1:
                    #maybe send a warning?
                    super(Biology, self).save()
                    return
        if self.subfamily:#if there is a subfamily, then look to taxonomy and populate up if possible.
            QS = drp_taxonomy.objects.filter(subfamily__exact=self.subfamily).filter(rank__exact="Subfamily")
            if QS.exists():
                if QS.count()==1:
                    #update higher level self fields
                    self.family = QS[0].family
                    self.tax_order = QS[0].tax_order
                    self.tax_class = QS[0].tax_class
                    self.phylum = QS[0].phylum
                    self.kingdom = QS[0].phylum
                    super(Biology, self).save()
                    return
                if QS.count() > 1:
                    #maybe send a warning?
                    super(Biology, self).save()
                    return
        if self.family:#if there is a family, then look to taxonomy and populate up if possible.
            QS = drp_taxonomy.objects.filter(family__exact=self.family).filter(rank__exact="Family")
            if QS.exists():
                if QS.count()==1:
                    #update higher level self fields
                    self.tax_order = QS[0].tax_order
                    self.tax_class = QS[0].tax_class
                    self.phylum = QS[0].phylum
                    self.kingdom = QS[0].phylum
                    super(Biology, self).save()
                    return
                if QS.count() > 1:
                    #maybe send a warning?
                    super(Biology, self).save()
                    return
        if self.tax_order:#if there is a tax_order, then look to taxonomy and populate up if possible.
            QS = drp_taxonomy.objects.filter(tax_order__exact=self.tax_order).filter(rank__exact="Order")
            if QS.exists():
                if QS.count()==1:
                    #update higher level self fields
                    self.tax_class = QS[0].tax_class
                    self.phylum = QS[0].phylum
                    self.kingdom = QS[0].phylum
                    super(Biology, self).save()
                    return
                if QS.count() > 1:
                    #maybe send a warning?
                    super(Biology, self).save()
                    return
        if self.tax_class:#if there is a tax_class, then look to taxonomy and populate up if possible.
            QS = drp_taxonomy.objects.filter(tax_class__exact=self.tax_class).filter(rank__exact="Class")
            if QS.exists():
                if QS.count()==1:
                    #update higher level self fields
                    self.phylum = QS[0].phylum
                    self.kingdom = QS[0].phylum
                    super(Biology, self).save()
                    return
                if QS.count() > 1:
                    #maybe send a warning?
                    super(Biology, self).save()
                    return
        else:
            super(Biology, self).save()
            return
